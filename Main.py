# -*- coding: utf-8 -*-
"""
Created on Wed May  1 00:00:34 2019

@author: Bhupendra
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as py

# Reading the dataset storing in the variable
dataset= py.read_csv('dataset1.csv')

# Two variable for storing Matrix Dependent and Independent Variable
# X for dependent dataset
# Y for Independent dataset

X = dataset.iloc[:,:-10].values
#iloc[left,right] left are line and right is columns
y = dataset.iloc[:,11:12].values

from sklearn.preprocessing import Imputer

imputer = Imputer(missing_values = "NaN", strategy="median",axis = 0)
imputer = imputer.fit(X[:,0:1])
X[:,0:1]  = imputer.transform(X[:,0:1])

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)

# Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)


from sklearn.linear_model import LogisticRegression
classifier=LogisticRegression()
classifier.fit(X_train,y_train)

y_pred = classifier.predict(X_test)

from sklearn.metrics import confusion_matrix
cm=confusion_matrix(y_test,y_pred)

# visualise 
# Visualising the Training set results
from matplotlib.colors import ListedColormap
X_set, y_set = X_train, y_train
X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),
                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))
plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
             alpha = 0.75, cmap = ListedColormap(('red', 'green')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(X_set[:, 0], X_set[:, 1],c = ListedColormap(('red', 'green'))(i), label = j)
plt.title('Classifier (Training set)')
plt.xlabel('Packet Classification')
plt.ylabel('Malware-trojan')
plt.legend()
plt.show()
